[project]
name = "rfdiffusion"
# Handled by `uv-dynamic-versioning` plugin below.
dynamic = ["version"]
description = "Set up RFDiffusion Training Environment"
authors = [
    {name="RosettaCommons"},
    {name="Hussein Al-Asadi", email="halasadi@adaptivebiotech.com"},
    {name="Andrew FigPope", email="afigpope@adaptivebiotech.com"}
]
requires-python = ">=3.10.0,<3.11.dev0"
dependencies = [
    'torch',
    # from SE3Transformer
    "hydra-core",
    "pyrsistent",
    "pytorch-lightning",
    "matplotlib",
    "logomaker",
    "deepspeed==0.16.9",
    "networkx>=2.8,<3.0"
    # this needed because deepspeed requires this
    #"nvidia-ml-py"
]


[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.pixi.project]
channels = [
    "dglteam/label/th24_cu124",
    "nvidia/label/cuda-12.4.0",
    "nvidia",
    "https://prefix.dev/conda-forge",
]
platforms = ["linux-64"]

[tool.pixi.pypi-options]
index-url = "https://gitlab.com/api/v4/projects/60833572/packages/pypi/simple"

[tool.pixi.dependencies]
python = ">=3.10.0,<3.11.dev0"
networkx = ">=2.8,<3.0"

# for ipython to work in pixi run
prompt_toolkit = ">=3.0.41,<3.1.0"

dgl = { channel = "dglteam/label/th24_cu124" }

# this is a dependency of rfdiffusion, but isn't explicitly declared
opt_einsum = "*"

mkl = "*"
numpy = "*"

# CUDA dependencies
gxx = "*"

[tool.pixi.feature.gpu.system-requirements]
cuda = "12.4"

[tool.pixi.feature.gpu.dependencies]
cuda-version = "12.4.*"
cuda-toolkit = "12.4.*"
pytorch-gpu = "==2.5.1"

[tool.pixi.feature.cpu.dependencies]
pytorch-cpu = "==2.5.1"

[tool.pixi.pypi-dependencies]
rfdiffusion = { path = ".", editable = true }
se3-transformer = { path = "env/SE3Transformer", editable = true }

# from SE3Transformer - requirements.txt
e3nn = "==0.3.3"
wandb = ">=0.17.2,<0.18.0"
pynvml = "==11.0.0"
dllogger = { git = "https://github.com/NVIDIA/dllogger.git", rev = "0540a43971f4a8a16693a9de9de73c1072020769" }
decorator = "==5.1.0"

# for ipython to work in pixi run
prompt_toolkit = ">=3.0.41,<3.1.0"

coverage = "*"
pyright = { version = "*", extras = ["nodejs"] }
pytest = "*"
pytest-cov = "*"
pytest-nunit = "*"
ruff = "*"
types-dataclasses = "*"

[tool.pixi.feature.publish.dependencies]
# For building wheel using hatch
hatch = "*"
# Uploading package
twine = "*"

[tool.pixi.environments]
default = { features = ["dev", "gpu"] }
cpu = { features = ["dev", "cpu"] }
# Use this env for publishing:
publish = { features = ["publish"] }
# Use this env within the Dockerfile
production = { features = ["gpu"] }

# This has tasks for building and uploading
[tool.pixi.feature.publish.tasks]
# Build into a wheel using hatch
build = { cmd = "hatch build", inputs = ["src/python"], outputs = ["dist/*"] }
# Upload to custom GCP registry using twine
publish = { cmd = "twine upload --skip-existing dist/*", depends-on = ["build"] }

[tool.pyright]
pythonVersion = "3.10"

include = ["src/python", "test/python"]
extraPaths = ["src/python/", "test/python/"]
exclude = ["**/__pycache__"]

strict = ["src/python", "test/python"]
deprecateTypingAliases = true

reportConstantRedefinition = true
reportDeprecated = true
reportDuplicateImport = true
reportErrorCodes = true
reportImplicitStringConcatenation = true
reportIncompleteStub = true
reportInconsistentConstructor = true
reportInvalidStubStatement = true
reportMatchNotExhaustive = true
reportMissingParameterType = true
reportMissingReturnType = true
reportMissingTypeArgument = true
reportPropertyTypeMismatch = true
reportShadowedImports = true
reportUnknownParameterType = true
reportUnnecessaryCast = true
reportUnnecessaryContains = true
reportUnnecessaryTypeIgnoreComment = true
reportUntypedBaseClass = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedClass = true
reportUnusedImport = true
reportUnusedVariable = true

[tool.ruff]
cache-dir = ".tmp/.ruff_cache"
include = ["src/python/**/*.py", "test/python/**/*.py", "pyproject.toml"]
fix = true
show-fixes = true
output-format = "full"
line-length = 99
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = [
    "B",    # Bugbear
    "D",    # Docstring
    "E",    # Pycodestyle
    "F",    # Pyflakes
    "I",    # Import
    "Q",    # Quotes
    "W",    # PEP8 warnings
    "NPY",  # Numpy
    "PD",   # Pydocstyle
    "PTH",  # Path
    "RUF",  # Ruff
    "UP",   # Unittest
    "D213", # D213: Multi-line docstring summary should start at the second line
]
ignore = [
    "D212", # D212: Multi-line docstring summary should start at the second line
    # This rule seems buggy: https://github.com/astral-sh/ruff/issues/2480
    "PD011", # PD011: Use `.to_numpy()` instead of `.values`
    # Lines that can be are auto-wrapped, so this only catches lines with names that are too long :(
    "E501", # E501: Line too long (99 > 79 characters)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"test/*" = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"            # Like Black, use double quotes for strings.
indent-style = "space"            # Like Black, indent with spaces, rather than tabs.
skip-magic-trailing-comma = false # Like Black, respect magic trailing commas.
line-ending = "auto"              # Like Black, automatically detect the appropriate line ending.

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true


"""
